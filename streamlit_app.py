import streamlit as st
import re
import pandas as pd

def limpar_texto(texto):
    """Fun√ß√£o para limpar texto"""
    if texto is None or pd.isna(texto):
        return ""
    return str(texto).lower().strip()

def classificar_perfil(dados):
    """Fun√ß√£o principal de classifica√ß√£o"""
    pontos_especialista = 0
    pontos_generalista = 0
    
    # 1. Fun√ß√£o de atua√ß√£o
    funcao = limpar_texto(dados.get('funcao_atuacao', ''))
    if funcao in ["engenharia de dados", "ci√™ncia de dados"]:
        pontos_especialista += 2
    elif funcao in ["an√°lise de dados", "bi"]:
        pontos_generalista += 3
    
    # 2. Cargo atual
    cargo = limpar_texto(dados.get('cargo_atual', ''))
    if cargo:
        palavras_esp = {
            "cientista de dados": 1.5,
            "data scientist": 1.5,
            "engenheiro de dados": 1.5,
            "data engineer": 1.5,
            "arquiteto de dados": 1.5,
            "data architect": 1.5,
            "machine learning": 1.5,
            "ml engineer": 1.5,
            "ai engineer": 1.5,
            "analytics engineer": 1.5,
            "estat√≠stico": 1.5,
            "professor": 2,
            "pesquisador": 2,
            "desenvolvedor": 1.5,
            "engenheiro de software": 1.5,
            "analista de sistemas": 1.5,
            "outras engenharias": 1.5
        }
        
        palavras_gen = {
            "analista de dados": 2.5,
            "data analyst": 2.5,
            "analista de bi": 2.5,
            "bi analyst": 2.5,
            "business intelligence": 2.5,
            "business analyst": 2.5,
            "analista de neg√≥cios": 2.5,
            "product manager": 2.5,
            "data product manager": 2.5,
            "analista de suporte": 2.5,
            "analista t√©cnico": 2.5
        }
        
        pontuacao_aplicada = False
        for palavra, pontos in palavras_esp.items():
            if palavra in cargo:
                pontos_especialista += pontos
                pontuacao_aplicada = True
                break
        
        if not pontuacao_aplicada:
            for palavra, pontos in palavras_gen.items():
                if palavra in cargo:
                    pontos_generalista += pontos
                    break
    
    # 3. Quantidade de atividades di√°rias
    atividades_diarias = dados.get('atividades_diarias', 0)
    if atividades_diarias >= 6:
        pontos_generalista += 2.5
        pontos_especialista -= 1
    elif atividades_diarias >= 3:
        pontos_generalista += 1.5
    elif atividades_diarias <= 2:
        pontos_especialista += 1
    
    # 4. Forma√ß√£o
    formacao = limpar_texto(dados.get('area_formacao', ''))
    formacoes_especialista = {
        "computa√ß√£o": 1.5,
        "engenharia de software": 1.5,
        "sistemas de informa√ß√£o": 2,
        "ti": 1.5,
        "estat√≠stica": 2,
        "matem√°tica": 1.5,
        "matem√°tica computacional": 1.5,
        "ci√™ncias atuariais": 2,
        "outras engenharias": 1.5,
        "engenharia": 1.5,
        "qu√≠mica": 1,
        "f√≠sica": 1
    }
    
    formacoes_generalista = {
        "economia": 2,
        "administra√ß√£o": 2.5,
        "contabilidade": 2.5,
        "finan√ßas": 2,
        "neg√≥cios": 2.5,
        "business": 2.5,
        "marketing": 2,
        "publicidade": 2,
        "comunica√ß√£o": 2,
        "jornalismo": 2,
        "ci√™ncias sociais": 2
    }
    
    formacoes_neutras = {
        "ci√™ncias biol√≥gicas": 1,
        "farm√°cia": 1,
        "medicina": 1,
        "√°rea da sa√∫de": 1
    }
    
    for area, pontos in formacoes_especialista.items():
        if area in formacao:
            pontos_especialista += pontos
            break
    else:
        for area, pontos in formacoes_generalista.items():
            if area in formacao:
                pontos_generalista += pontos
                break
        else:
            for area, pontos in formacoes_neutras.items():
                if area in formacao:
                    pontos_especialista += pontos * 0.5
                    pontos_generalista += pontos * 0.5
                    break
    
    # 5. N√≠vel de ensino
    nivel_ensino = limpar_texto(dados.get('nivel_ensino', ''))
    if nivel_ensino in ["doutorado", "phd", "doutorado ou phd"]:
        pontos_especialista += 2
    elif nivel_ensino == "mestrado":
        pontos_especialista += 1.5
    elif nivel_ensino == "p√≥s-gradua√ß√£o":
        pontos_especialista += 0.5
    elif nivel_ensino == "estudante de gradua√ß√£o":
        pontos_generalista += 0.5
    
    # 6. Posi√ß√£o de gest√£o
    eh_gestor = dados.get('eh_gestor', False)
    if eh_gestor:
        pontos_generalista += 2
    
    # 7. C√°lculo final
    diferenca = abs(pontos_especialista - pontos_generalista)
    total_pontos = pontos_especialista + pontos_generalista
    
    if diferenca >= 4 and total_pontos >= 4:
        if pontos_especialista > pontos_generalista:
            resultado = "Especialista_Alta_Confianca"
        else:
            resultado = "Generalista_Alta_Confianca"
    elif diferenca >= 2.5 and total_pontos >= 3:
        if pontos_especialista > pontos_generalista:
            resultado = "Especialista_M√©dia_Confianca"
        else:
            resultado = "Generalista_M√©dia_Confianca"
    elif diferenca >= 1.5 and total_pontos >= 1.5:
        if pontos_especialista > pontos_generalista:
            resultado = "Especialista_Baixa_Confianca"
        else:
            resultado = "Generalista_Baixa_Confianca"
    else:
        resultado = "Ambiguo"
    
    return resultado, round(pontos_especialista, 1), round(pontos_generalista, 1)

# Interface Streamlit
def main():
    st.set_page_config(
        page_title="Calculadora de Perfil Profissional",
        page_icon="üìä",
        layout="wide"
    )
    
    st.title("üìä Calculadora de Perfil Profissional")
    st.markdown("### Descubra se voc√™ tem um perfil mais **Especialista** ou **Generalista** em dados")
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.header("‚ÑπÔ∏è Como funciona?")
        st.markdown("""
        Esta calculadora analisa diferentes aspectos do seu perfil profissional:
        
        - **Fun√ß√£o de atua√ß√£o**
        - **Cargo atual**
        - **Quantidade de atividades**
        - **√Årea de forma√ß√£o**
        - **N√≠vel de ensino**
        - **Posi√ß√£o de gest√£o**
        
        Com base nessas informa√ß√µes, o sistema calcula uma pontua√ß√£o para determinar se voc√™ tem um perfil mais especialista ou generalista.
        """)
    
    # Formul√°rio principal
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéØ Informa√ß√µes Profissionais")
        
        funcao_atuacao = st.selectbox(
            "Fun√ß√£o de atua√ß√£o principal:",
            ["", "Engenharia de dados", "Ci√™ncia de dados", "An√°lise de dados", "BI", "Outra"]
        )
        
        cargo_atual = st.text_input(
            "Cargo atual:",
            placeholder="Ex: Analista de Dados, Data Scientist, etc."
        )
        
        atividades_diarias = st.slider(
            "Quantas atividades diferentes voc√™ realiza diariamente?",
            min_value=0,
            max_value=10,
            value=3,
            help="Considere tarefas como an√°lise, modelagem, visualiza√ß√£o, reuni√µes, etc."
        )
        
        # Nova pergunta sobre gest√£o
        eh_gestor = st.radio(
            "Voc√™ ocupa uma posi√ß√£o de gest√£o?",
            ["N√£o", "Sim"],
            help="Considera lideran√ßa de equipe, coordena√ß√£o de projetos ou gest√£o de pessoas"
        )
    
    with col2:
        st.subheader("üéì Forma√ß√£o Acad√™mica")
        
        area_formacao = st.selectbox(
            "√Årea de forma√ß√£o:",
            ["", "Computa√ß√£o", "Engenharia de Software", "Sistemas de Informa√ß√£o", "TI", 
             "Estat√≠stica", "Matem√°tica", "Matem√°tica Computacional", "Ci√™ncias Atuariais",
             "Outras Engenharias", "Engenharia", "Qu√≠mica", "F√≠sica", "Economia",
             "Administra√ß√£o", "Contabilidade", "Finan√ßas", "Neg√≥cios", "Business",
             "Marketing", "Publicidade", "Comunica√ß√£o", "Jornalismo", "Ci√™ncias Sociais",
             "Ci√™ncias Biol√≥gicas", "Farm√°cia", "Medicina", "√Årea da Sa√∫de", "Outra"]
        )
        
        nivel_ensino = st.selectbox(
            "N√≠vel de ensino:",
            ["", "Estudante de gradua√ß√£o", "Gradua√ß√£o", "P√≥s-gradua√ß√£o", "Mestrado", "Doutorado", "PhD"]
        )
    
    # Bot√£o de calcular
    st.markdown("---")
    col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
    
    with col_btn2:
        calcular = st.button("üîç Calcular Perfil", type="primary", use_container_width=True)
    
    if calcular:
        # Preparar dados
        dados = {
            'funcao_atuacao': funcao_atuacao.lower() if funcao_atuacao else '',
            'cargo_atual': cargo_atual,
            'atividades_diarias': atividades_diarias,
            'area_formacao': area_formacao.lower() if area_formacao else '',
            'nivel_ensino': nivel_ensino.lower() if nivel_ensino else '',
            'eh_gestor': eh_gestor == "Sim"
        }
        
        # Calcular resultado
        resultado, pontos_esp, pontos_gen = classificar_perfil(dados)
        
        # Exibir resultados
        st.markdown("---")
        st.subheader("üìà Resultado da An√°lise")
        
        # M√©tricas
        col_met1, col_met2, col_met3, col_met4 = st.columns(4)
        
        with col_met1:
            st.metric("Pontos Especialista", pontos_esp)
        
        with col_met2:
            st.metric("Pontos Generalista", pontos_gen)
        
        with col_met3:
            diferenca = abs(pontos_esp - pontos_gen)
            st.metric("Diferen√ßa", f"{diferenca:.1f}")
        
        with col_met4:
            if dados['eh_gestor']:
                st.metric("B√¥nus Gest√£o", "+2.0", delta="Generalista")
            else:
                st.metric("B√¥nus Gest√£o", "0.0")
        
        # Resultado principal
        st.markdown("### üéØ Seu Perfil:")
        
        if "Especialista" in resultado:
            emoji = "üî¨"
            cor = "blue"
            if "Alta_Confianca" in resultado:
                nivel = "Alta Confian√ßa"
                descricao = "Voc√™ tem um perfil claramente **especialista**! Suas caracter√≠sticas indicam foco em √°reas t√©cnicas espec√≠ficas e conhecimento aprofundado."
            elif "Media_Confianca" in resultado:
                nivel = "M√©dia Confian√ßa"
                descricao = "Voc√™ tende a ter um perfil **especialista**. H√° indica√ß√µes de especializa√ß√£o t√©cnica, mas com alguns aspectos generalistas."
            else:
                nivel = "Baixa Confian√ßa"
                descricao = "Voc√™ pode ter um perfil **especialista**, mas h√° sinais mistos em sua trajet√≥ria profissional."
        
        elif "Generalista" in resultado:
            emoji = "üé≠"
            cor = "green"
            if "Alta_Confianca" in resultado:
                nivel = "Alta Confian√ßa"
                descricao = "Voc√™ tem um perfil claramente **generalista**! Suas caracter√≠sticas indicam versatilidade e atua√ß√£o em m√∫ltiplas √°reas."
            elif "Media_Confianca" in resultado:
                nivel = "M√©dia Confian√ßa"
                descricao = "Voc√™ tende a ter um perfil generalista. H√° indica√ß√µes de versatilidade, mas com alguns aspectos de especializa√ß√£o."
            else:
                nivel = "Baixa Confian√ßa"
                descricao = "Voc√™ pode ter um perfil generalista, mas h√° sinais mistos em sua trajet√≥ria profissional."
        
        else:
            emoji = "‚öñÔ∏è"
            cor = "orange"
            nivel = "Perfil Amb√≠guo"
            descricao = "Seu perfil apresenta caracter√≠sticas equilibradas entre especialista e generalista. Isso pode indicar uma transi√ß√£o de carreira ou um perfil h√≠brido."
        
        st.markdown(f"""
        <div style="
            padding: 20px; 
            border-radius: 10px; 
            background-color: rgba(0, 123, 255, 0.1); 
            border-left: 5px solid {'#007bff' if cor == 'blue' else '#28a745' if cor == 'green' else '#ffc107'};
            margin: 20px 0;
        ">
            <h2 style="margin: 0; color: {'#007bff' if cor == 'blue' else '#28a745' if cor == 'green' else '#ffc107'};">
                {emoji} {resultado.replace('_', ' ').title()}
            </h2>
            <h4 style="margin: 10px 0; color: #666;">N√≠vel de Confian√ßa: {nivel}</h4>
            <p style="margin: 15px 0; font-size: 16px; line-height: 1.6;">
                {descricao}
            </p>
        </div>
        """, unsafe_allow_html=True)
        
       

if __name__ == "__main__":
    main()